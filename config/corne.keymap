/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define EXP 1
#define NUM 2
#define SYM 3
#define EXT 4

// left hand keys with ENTER key included
#define LHK 0 1 2 3 4  5     12 13 14 15 16 17    24 25 26 27 28 29    36 37 38   39
// right hand keys with SPACE key included
#define RHK 6 7 8 9 10 11    18 19 20 21 22 23    30 31 32 33 34 35    39 40 41   38

#define LHMR(K1,K2,K3,K4) &lh_hm LGUI K1    &lh_hm LALT K2   &lh_hm LCTRL K3   &lh_hm LSHFT K4
#define RHMR(K1,K2,K3,K4) &rh_hm LSHFT K1    &rh_hm LCTRL K2   &rh_hm LALT K3   &rh_hm LGUI K4



#define BTS(num) &bt BT_SEL num

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        ht_bl: holdtap_balanced {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            tapping-term-ms = <200>;
            label = "HOLDTAP_BALANCED";
            flavor = "balanced";
        };
        ht_bl_mo: holdtap_balanced_mo {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            tapping-term-ms = <200>;
            label = "HOLDTAP_BALANCED for mo";
            flavor = "balanced";
        };
        lh_hm: left_positional_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RHK>;    // <---[[right-hand keys]]
            hold-trigger-on-release;
        };
        rh_hm: right_positional_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LHK>;    // <---[[left-hand keys]]
            hold-trigger-on-release;
        };
        ltc: layer_tap_custom {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };
};



/ {
    macros {
    // move to left space
        SPL: SPL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LGUI>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL &kp LGUI>
                ;
        };
        SPR: SPR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LGUI>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL &kp LGUI>
                ;
        };
    };
};

#define COMBOS_TIMEOUT 35
/ {
    combos {
        compatible = "zmk,combos";
        combo_ESC {
            timeout-ms = <COMBOS_TIMEOUT>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };
        combo_BACKSPACE {
            timeout-ms = <COMBOS_TIMEOUT>;
            key-positions = <7 8>;
            bindings = <&kp BACKSPACE>;
        };
        combo_DEL {
            timeout-ms = <COMBOS_TIMEOUT>;
            key-positions = <8 9>;
            bindings = <&kp DELETE>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
&ht_bl LGUI TAB  &kp Q     &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I       &kp O      &kp P     &bspc_del
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &kp LCTRL   &kp A      &kp S      &kp D      &kp F      &kp G          &kp H      &kp J      &kp K       &kp L      &kp SEMI   &kp SQT
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &kp LSHFT   &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA   &kp DOT   &kp FSLH    &kp LSHFT
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &mo NUM      &mo SYM   &ht_bl LALT SPACE     &lt EXT RET   &kp LBKT      &kp RBKT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };
                experimental_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
         &none  &kp Q     &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I       &kp O      &kp P     &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
        &none   LHMR(A,       S,        D,          F)      &kp G          &kp H      RHMR(J,       K,         L,         SEMI)   &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &none       &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA   &kp DOT   &kp FSLH    &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                     &ltc    NUM ESC  &ltc SYM TAB   &ht_bl_mo EXT SPACE   &mt LSHFT RET   &kp LBKT      &kp RBKT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };
                num_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
   &kp LG(TAB)  &trans     &kp F7    &kp F8      &kp F9     &kp F10         &kp KP_NUM   &kp N7     &kp N8      &kp N9     &kp EQUAL    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp F4       &kp F5     &kp F6    &kp F11         &trans   &kp N4    &kp N5     &kp N6      &kp PLUS   &kp DQT
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp F1     &kp F2     &kp F3     &kp F12         &kp N0      &kp N1      &kp N2    &kp N3      &kp MINUS    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans      &trans         &trans           &trans         &kp KP_COMMA  &kp KP_DOT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };

                symbol_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &trans      &trans     &trans     &kp EQUAL   &trans    &trans         &kp BSLH     &kp AMPS  &kp STAR  &kp TILDE     &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp LPAR   &kp UNDER   &kp RPAR   &kp PLUS       &kp PIPE  &kp DOLLAR  &kp PRCNT  &kp CARET  &kp COLON  &kp GRAVE
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
&kp LG(SPACE)   &trans     &kp LT    &kp MINUS     &kp GT    &trans         &trans    &kp EXCL   &kp AT     &kp HASH    &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans      &trans         &trans          &kp GRAVE      &kp DQT       &kp SQT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };

                ext_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
 &bt BT_CLR      &trans  &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp C_VOL_UP    &trans    &trans     &trans     &trans      &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
     &trans    &trans      &SPL       &caps_word      &SPR      &kp C_MUTE         &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans    BTS(0)      BTS(1)     BTS(2)    BTS(3)     &kp C_VOL_DN      &trans    &trans     &trans     &trans      &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &tog EXP      &trans         &trans           &trans      &bt BT_CLR       &trans
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };
        };
};
