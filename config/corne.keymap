/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define NAV 3
#define EXT 4

// left hand keys with thumb cluster
#define LHK 0 1 2 3 4  5     12 13 14 15 16 17    24 25 26 27 28 29    36 37 38   39 40 41
// right hand keys with thum cluster
#define RHK 6 7 8 9 10 11    18 19 20 21 22 23    30 31 32 33 34 35    39 40 41   38 37 36

#define LHMR(K1,K2,K3,K4) &lh_hm LGUI K1    &lh_hm LALT K2   &lh_hm LCTRL K3   &lh_hm LSHFT K4
#define RHMR(K1,K2,K3,K4) &rh_hm LSHFT K1    &rh_hm LCTRL K2   &rh_hm LALT K3   &rh_hm LGUI K4



#define BTS(num) &bt BT_SEL num

#define TAPPING_TERM 220

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        bmo: holdtap_balanced_mo {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            label = "HOLDTAP_BALANCED for mo";
            flavor = "balanced";
        };
        lh_hm: left_positional_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <110>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RHK>;    // <---[[right-hand keys]]
            hold-trigger-on-release;
        };
        rh_hm: right_positional_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <110>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LHK>;    // <---[[left-hand keys]]
            hold-trigger-on-release;
        };
        ltc: layer_tap_custom {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        sht: space_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <TAPPING_TERM>;
            require-prior-idle-ms = <140>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };
};



/ {
    macros {
    // move to left space
        SPL: space_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LGUI>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL &kp LGUI>
                ;
        };
        SPR: space_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LGUI>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL &kp LGUI>
                ;
        };
    };
};


#define VERT_COMBO(NAME,KEYS,RESULT) NAME {\
    timeout-ms = <35>;\
    key-positions = <KEYS>;\
    bindings = <RESULT>;\
}
#define HORIZONTAL_COMBO(NAME,KEYS,RESULT) NAME {\
    timeout-ms = <20>;\
    key-positions = <KEYS>;\
    bindings = <RESULT>;\
}

#define COMBOS_TIMEOUT 25
/ {
    combos {
        compatible = "zmk,combos";
        combo_BACKSPACE {
            timeout-ms = <COMBOS_TIMEOUT>;
            key-positions = <7 8>;
            bindings = <&kp BACKSPACE>;
        };
        combo_DEL {
            timeout-ms = <COMBOS_TIMEOUT>;
            key-positions = <8 9>;
            bindings = <&kp DELETE>;
        };
        VERT_COMBO(combo_1,1 13,&kp N1);
        VERT_COMBO(combo_2,2 14,&kp N2);
        VERT_COMBO(combo_3,3 15,&kp N3);
        VERT_COMBO(combo_4,4 16,&kp N4);
        VERT_COMBO(combo_5,5 17,&kp N5);
        VERT_COMBO(combo_6,6 18,&kp N6);
        VERT_COMBO(combo_7,7 19,&kp N7);
        VERT_COMBO(combo_8,8 20,&kp N8);
        VERT_COMBO(combo_9,9 21,&kp N9);
        VERT_COMBO(combo_0,10 22,&kp N0);

//        VERT_COMBO(combo_EXCL,13 25,&kp EXCL);
//        VERT_COMBO(combo_AT,14 26,&kp AT);
//        VERT_COMBO(combo_HASH,15 27,&kp HASH);
//        VERT_COMBO(combo_DOLLAR,16 28,&kp DOLLAR);
//        VERT_COMBO(combo_PRCNT,17 29,&kp PRCNT);
//        VERT_COMBO(combo_CARET,18 30,&kp CARET);
//        VERT_COMBO(combo_AMPS,19 31,&kp AMPS);
//        VERT_COMBO(combo_STAR,20 32,&kp STAR);
//        VERT_COMBO(combo_TILDE,21 33,&kp TILDE);


        HORIZONTAL_COMBO(combo_LBRC,2 3,&kp LBRC);
        HORIZONTAL_COMBO(combo_RBRC,3 4,&kp RBRC);
        HORIZONTAL_COMBO(combo_EQ,4 5,&kp EQUAL);

        HORIZONTAL_COMBO(combo_LPAR,14 15,&kp LPAR);
        HORIZONTAL_COMBO(combo_LPAR,15 16,&kp RPAR);
        HORIZONTAL_COMBO(combo_UNDER,16 17,&kp UNDER);

        HORIZONTAL_COMBO(combo_LT,26 27,&kp LT);
        HORIZONTAL_COMBO(combo_GT,27 28,&kp GT);
        HORIZONTAL_COMBO(combo_MINUS,28 29,&kp MINUS);

        HORIZONTAL_COMBO(combo_BSLH,6 7,&kp BSLH);
        HORIZONTAL_COMBO(combo_PIPE,18 19,&kp PIPE);
        HORIZONTAL_COMBO(combo_PLUS,30 31,&kp PLUS);

        HORIZONTAL_COMBO(combo_GRAVE,1 2,&kp GRAVE);
        HORIZONTAL_COMBO(combo_SQT,9 10,&kp SQT);
        HORIZONTAL_COMBO(combo_DQT,21 22,&kp DQT);
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
         &none  &kp Q     &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I       &kp O      &kp P     &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
        &none   LHMR(A,       S,        D,          F)      &kp G          &kp H      RHMR(J,       K,         L,         SEMI)   &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &none       &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA   &kp DOT   &kp FSLH    &none
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                         &ltc NUM LBKT  &ltc SYM TAB   &mt LSHFT ESC     &mt RSHFT RET &sht NAV SPACE   &ltc EXT RBKT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };
                num_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans     &trans     &kp F7    &kp F8      &kp F9     &kp F10         &kp KP_NUM   &kp N7   &kp N8     &kp N9    &kp EQUAL    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp F4       &kp F5     &kp F6    &kp F11         &trans   &kp N4    &kp N5     &kp N6      &kp PLUS    &kp DQT
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp F1     &kp F2     &kp F3     &kp F12         &kp N0      &kp N1      &kp N2    &kp N3      &kp MINUS    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans      &trans         &trans           &trans         &kp COMMA  &kp DOT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };

                symbol_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
    &trans      &trans     &kp LBRC  &kp EQUAL   &kp RBRC    &trans         &kp BSLH     &kp AMPS  &kp STAR  &kp TILDE     &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans   &trans     &kp LPAR   &kp UNDER   &kp RPAR   &kp PLUS       &kp PIPE  &kp DOLLAR  &kp PRCNT  &kp CARET  &kp COLON  &kp GRAVE
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
       &trans &kp LG(SPACE)  &kp LT    &kp MINUS     &kp GT    &trans         &trans    &kp EXCL   &kp AT     &kp HASH    &kp QMARK    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans      &trans         &trans          &kp GRAVE      &kp DQT       &kp SQT
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };

                nav_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
     &trans      &trans  &trans        &trans     &trans     &trans        &kp PG_UP   &kp HOME     &trans     &kp END     &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
     &trans    &trans      &trans       &trans      &trans  &trans         &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans     &trans    &trans     &trans     &trans   &trans          &kp PG_DN   &trans     &trans    &trans     &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans     &kp BACKSPACE    &kp DELETE        &trans         &trans      &trans
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };

                ext_layer {
                        bindings = <
// .---------------------------------------------------------------------------------------------------------------------------------------.
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
     &trans     &trans  &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp C_VOL_UP    &trans    &trans     &trans     &trans      &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
     &trans    &trans      &SPL       &caps_word      &SPR      &kp C_MUTE  &trans     &trans   &trans     &trans      &trans      &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
      &trans     &trans    &trans     &trans     &trans   &kp C_VOL_DN      BTS(0)      BTS(1)     BTS(2)    BTS(3)     &trans    &trans
// |          |          |          |          |          |          | | |          |          |          |          |          |          |
// '---------------------------------------------------------------------------------------------------------------------------------------'
//                         |             |             |             | | |             |             |             |
                               &trans     &kp BACKSPACE    &kp DELETE        &trans         &bt BT_CLR    &trans
//                         |             |             |             | | |             |             |             |
//                         '---------------------------------------------------------------------------------------'
                        >;
                };
        };
};
